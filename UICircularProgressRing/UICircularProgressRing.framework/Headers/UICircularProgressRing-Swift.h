#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UICircularProgressRing",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol UICircularProgressRingDelegate;
enum UICircularProgressRingStyle : NSInteger;
@class UIColor;
enum UICircularProgressRingGradientPosition : NSInteger;
@class UIFont;
@class NSCoder;

/// <h1>UICircularProgressRing</h1>
/// This is the UIView subclass that creates and handles everything
/// to do with the progress ring
/// This class has a custom CAShapeLayer (UICircularProgressRingLayer) which
/// handels the drawing and animating of the view
/// The properties in this class correspond with the
/// properties in UICircularProgressRingLayer.
/// When they are set in here, they are also set for the layer and drawn accordingly
/// Read the docs for what each property does and what can be customized.
/// <h2>Author</h2>
/// Luis Padron
SWIFT_CLASS("_TtC22UICircularProgressRing22UICircularProgressRing")
@interface UICircularProgressRing : UIView
/// The delegate for the UICircularProgressRing
/// <h2>Important</h2>
/// When progress is done updating via UICircularProgressRing.setValue(<em>:), the
/// finishedUpdatingProgressFor(</em> ring: UICircularProgressRing) will be called.
/// The ring will be passed to the delegate in order to keep track of
/// multiple ring updates if needed.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, weak) id <UICircularProgressRingDelegate> _Nullable delegate;
/// Whether or not the progress ring should be a full circle.
/// What this means is that the outer ring will always go from 0 - 360 degrees and
/// the inner ring will be calculated accordingly depending on current value.
/// <h2>Important</h2>
/// Default = true
/// When this property is true any value set for <code>endAngle</code> will be ignored.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL fullCircle;
/// The value property for the progress ring.
/// <h2>Important</h2>
/// Default = 0
/// Must be a non-negative value. If this value falls below <code>minValue</code> it will be
/// clamped and set equal to <code>minValue</code>.
/// This cannot be used to get the value while the ring is animating, to get
/// current value while animating use <code>currentValue</code>.
/// The current value of the progress ring after animating, use startProgress(value:)
/// to alter the value with the option to animate and have a completion handler.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat value;
/// The minimum value for the progress ring. ex: (0) -> 100.
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// The <code>value</code> of the progress ring must NOT fall below <code>minValue</code> if it does the <code>value</code> property is clamped
/// and will be set equal to <code>value</code>, you will receive a warning message in the console.
/// Making this value greater than
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat minValue;
/// The maximum value for the progress ring. ex: 0 -> (100)
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// Unlike the <code>minValue</code> member <code>value</code> can extend beyond <code>maxValue</code>. What happens in this case
/// is the inner ring will do an extra loop through the outer ring, this is not noticible however.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat maxValue;
/// Variable for the style of the progress ring.
/// Range: [1,5]
/// The four styles are
/// <ul>
///   <li>
///     1: Radius of the inner ring is smaller (inner ring inside outer ring)
///   </li>
///   <li>
///     2: Radius of inner ring is equal to outer ring (both at same location)
///   </li>
///   <li>
///     3: Radius of inner ring is equal to outer ring, and the outer ring is dashed
///   </li>
///   <li>
///     4: Radius of inner ring is equal to outer ring, and the outer ring is dotted
///   </li>
///   <li>
///     5: Radius of inner ring is equal to outer ring, and inner ring has gradient
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// The reason for this is IB has no support for enumerations as of yet
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger ibRingStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'ringStyle' instead");
/// The style of the progress ring.
/// Type: <code>UICircularProgressRingStyle</code>
/// The five styles include <code>inside</code>, <code>ontop</code>, <code>dashed</code>, <code>dotted</code>, and <code>gradient</code>
/// <h2>Important</h2>
/// Default = UICircularProgressRingStyle.inside
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingStyle ringStyle;
/// Whether or not the value knob is shown
/// <h2>Important</h2>
/// Default = false
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL showsValueKnob;
/// The size of the value knob (diameter)
/// <h2>Important</h2>
/// Default = 15
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat valueKnobSize;
/// The color of the value knob
/// <h2>Important</h2>
/// Default = UIColor.lightGray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull valueKnobColor;
/// The blur (size) of the value knob’s shadow
/// <h2>Important</h2>
/// Default = 2
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic) CGFloat valueKnobShadowBlur;
/// The offset of the value knob’s shadow
/// <h2>Important</h2>
/// Default = CGSize.zero
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic) CGSize valueKnobShadowOffset;
/// The color of the value knob’s shadow
/// <h2>Important</h2>
/// Default = UIColor.lightGray
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic, strong) UIColor * _Nonnull valueKnobShadowColor;
/// An array of CGFloats, used to calculate the dash length for viewStyle = 3
/// <h2>Important</h2>
/// Default = [7.0, 7.0]
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull patternForDashes;
/// The start angle for the entire progress ring view.
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 0 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat startAngle;
/// The end angle for the entire progress ring
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 360 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat endAngle;
/// The colors which will be used to create the gradient.
/// Only used when <code>ringStyle</code> is <code>.gradient</code>
/// The colors should be in the order they will be drawn in.
/// <h2>Important</h2>
/// By default this property will be an empty array.
/// If this array is empty, no gradient will be drawn.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
/// The location for each color provided in <code>gradientColors</code>; each location must be
/// a CGFloat value in the range of 0 to 1, inclusive. If 0 and 1 are not in the
/// locations array, Quartz uses the colors provided that are closest to 0 and 1 for
/// those locations.
/// If locations is nil, the first color in <code>gradientColors</code> is assigned to location 0,
/// the last color in <code>gradientColors</code> is assigned to location 1, and intervening
/// colors are assigned locations that are at equal intervals in between.
/// The locations array should contain the same number of items as the <code>gradientColors</code>
/// array.
/// <h2>Important</h2>
/// By default this property will be nil
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientColorLocations;
/// The start location for the gradient.
/// This property determines where the gradient will begin to draw,
/// for all possible values see <code>UICircularProgressRingGradientPosition</code>.
/// <h2>Important</h2>
/// By default this property is <code>.topRight</code>
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientStartPosition;
/// The end location for the gradient.
/// This property determines where the gradient will end drawing,
/// for all possible values see <code>UICircularProgressRingGradientPosition</code>.
/// <h2>Important</h2>
/// By default this property is <code>.bottomLeft</code>
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientEndPosition;
/// The width of the outer ring for the progres bar
/// <h2>Important</h2>
/// Default = 10.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat outerRingWidth;
/// The color for the outer ring
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
/// The color for the outer ring border
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Abdulla Allaith
@property (nonatomic, strong) UIColor * _Nonnull outerBorderColor;
/// The width for the outer ring border
/// <h2>Important</h2>
/// Default = 2
/// <h2>Author</h2>
/// Abdulla Allaith
@property (nonatomic) CGFloat outerBorderWidth;
/// The style for the outer ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 1
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t outerRingCapStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'outerCapStyle' instead");
/// The style for the tip/cap of the outer ring
/// Type: <code>CGLineCap</code>
/// <h2>Important</h2>
/// Default = CGLineCap.butt
/// This is only noticible when ring is not a full circle.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGLineCap outerCapStyle;
/// The width of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = 5.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingWidth;
/// The color of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = UIColor.blue
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
/// The spacing between the outer ring and inner ring
/// <h2>Important</h2>
/// This only applies when using progressRingStyle = 1
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingSpacing;
/// The style for the inner ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 2
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 2
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t innerRingCapStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'innerCapStyle' instead");
/// The style for the tip/cap of the inner ring
/// Type: <code>CGLineCap</code>
/// <h2>Important</h2>
/// Default = CGLineCap.round
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGLineCap innerCapStyle;
/// A toggle for showing or hiding the value label.
/// If false the current value will not be shown.
/// <h2>Important</h2>
/// Default = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL shouldShowValueText;
/// The text color for the value label field
/// <h2>Important</h2>
/// Default = UIColor.black
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
/// The font to be used for the progress indicator.
/// All font attributes are specified here except for font color, which is done
/// using <code>fontColor</code>.
/// <h2>Important</h2>
/// Default = UIFont.systemFont(ofSize: 18)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The name of the value indicator the value label will
/// appened to the value
/// Example: “ GB” -> “100 GB”
/// <h2>Important</h2>
/// Default = “%”
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSString * _Nonnull valueIndicator;
/// A toggle for either placing the value indicator right or left to the value
/// Example: true -> “GB 100” (instead of 100 GB)
/// <h2>Important</h2>
/// Default = false (place value indicator to the right)
/// <h2>Author</h2>
/// Elad Hayun
@property (nonatomic) BOOL rightToLeft;
/// A toggle for showing or hiding floating points from
/// the value in the value label
/// <h2>Important</h2>
/// Default = false (dont show)
/// To customize number of decmial places to show, assign a value to decimalPlaces.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL showFloatingPoint;
/// The amount of decimal places to show in the value label
/// <h2>Important</h2>
/// Default = 2
/// Only used when showFloatingPoint = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger decimalPlaces;
/// The type of animation function the ring view will use
/// <h2>Important</h2>
/// Default = .easeInEaseOut
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CAMediaTimingFunctionName _Nonnull animationTimingFunction;
/// This returns whether or not the ring is currently animating
/// <h2>Important</h2>
/// Get only property
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, readonly) BOOL isAnimating;
/// The direction the circle is drawn in
/// Example: true -> clockwise
/// <h2>Important</h2>
/// Default = true (draw the circle clockwise)
/// <h2>Author</h2>
/// Pete Walker
@property (nonatomic) BOOL isClockwise;
/// Overrides the default layer with the custom UICircularProgressRingLayer class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Overriden public init to initialize the layer and view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overriden public init to initialize the layer and view
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriden because of custom layer drawing in UICircularProgressRingLayer
- (void)drawRect:(CGRect)rect;
/// Sets the current value for the progress ring, calling this method while ring is
/// animating will cancel the previously set animation and start a new one.
/// <h2>Important</h2>
/// Animation duration = 0 will cause no animation to occur, and value will instantly
/// be set.
/// Calling this method again while a current progress animation is in progress will <em>not</em>
/// cause the animation to be restarted. The old animation will be removed (calling the completion and delegate)
/// and a new animation will start from where the old one left off at. If you wish to instead reset an animation
/// consider <code>resetProgress</code>.
/// <h2>Author</h2>
/// Luis Padron
/// \param to The value to be set for the progress ring
///
/// \param duration The time interval duration for the animation
///
/// \param completion The completion closure block that will be called when
/// animtion is finished (also called when animationDuration = 0), default is nil
///
- (void)startProgressTo:(CGFloat)value duration:(NSTimeInterval)duration completion:(void (^ _Nullable)(void))completion;
/// Pauses the currently running animation and halts all progress.
/// <h2>Important</h2>
/// This method has no effect unless called when there is a running animation.
/// You should call this method manually whenever the progress ring is not in an active view,
/// for example in <code>viewWillDisappear</code> in a parent view controller.
/// <h2>Author</h2>
/// Luis Padron & Nicolai Cornelis
- (void)pauseProgress;
/// Continues the animation with its remaining time from where it left off before it was paused.
/// This method has no effect unless called when there is a paused animation.
/// You should call this method when you wish to resume a paused animation.
/// <h2>Author</h2>
/// Luis Padron & Nicolai Cornelis
- (void)continueProgress;
/// Resets the progress back to the <code>minValue</code> of the progress ring.
/// Does <em>not</em> perform any animations
/// <h2>Author</h2>
/// Luis Padron
- (void)resetProgress;
/// This function allows animation of the animatable properties of the <code>UICircularProgressRing</code>.
/// These properties include <code>innerRingColor, innerRingWidth, outerRingColor, outerRingWidth, innerRingSpacing, fontColor</code>.
/// Simply call this function and inside of the animation block change the animatable properties as you would in any <code>UView</code>
/// animation block.
/// The completion block is called when all animations finish.
- (void)animatePropertiesWithDuration:(NSTimeInterval)duration animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations;
/// This function allows animation of the animatable properties of the <code>UICircularProgressRing</code>.
/// These properties include <code>innerRingColor, innerRingWidth, outerRingColor, outerRingWidth, innerRingSpacing, fontColor</code>.
/// Simply call this function and inside of the animation block change the animatable properties as you would in any <code>UView</code>
/// animation block.
/// The completion block is called when all animations finish.
- (void)animatePropertiesWithDuration:(NSTimeInterval)duration animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(void))completion;
@end



@class UILabel;

/// This is the protocol declaration for the UICircularProgressRing delegate property
/// <h2>Important</h2>
/// When progress is done updating via UICircularProgressRing.setValue(_:), the
/// finishedUpdatingProgress(forRing: UICircularProgressRing) will be called.
/// The ring will be passed to the delegate in order to keep
/// track of multiple ring updates if needed.
/// <h2>Author</h2>
/// Luis Padron
SWIFT_PROTOCOL("_TtP22UICircularProgressRing30UICircularProgressRingDelegate_")
@protocol UICircularProgressRingDelegate
@optional
/// Called when progress ring is done animating for current value
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which finished animating
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didFinishProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// Called when progress has paused
/// <ul>
///   <li>
///     Parameter:
///     <ul>
///       <li>
///         ring: The ring which has paused
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didPauseProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// Called when the progress has continued after a pause
/// <ul>
///   <li>
///     Parameter:
///     <ul>
///       <li>
///         ring: The ring which has continued
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didContinueProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// This method is called whenever the value is updated, this means during animation this method will be called in real time.
/// This can be used to update another label or do some other work, whenever you need the exact current value of the ring
/// during animation.
/// <h2>Important:</h2>
/// This is a very hot method and may be called hundreds of times per second during animations. As such make sure to only
/// do very simple and non-intensive work in this method. Doing any work that takes time will considerably slow down your application.
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which updated the progress
///       </li>
///       <li>
///         newValue: The value which the ring has updated to
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didUpdateProgressValueFor:(UICircularProgressRing * _Nonnull)ring to:(CGFloat)newValue;
/// This method is called whenever the label is about to be drawn.
/// This can be used to modify the label looks e.g. NSAttributedString for text kerning
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which the label will be displayed in
///       </li>
///       <li>
///         label: The label which will be displayed
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)willDisplayLabelFor:(UICircularProgressRing * _Nonnull)ring :(UILabel * _Nonnull)label;
@end

/// <h1>UICircularProgressRingGradientPosition</h1>
/// This is an enumeration which is used to determine the position for a
/// gradient. Used inside the <code>UICircularProgressRingLayer</code> to allow customization
/// for the gradient.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingGradientPosition, closed) {
/// Gradient positioned at the top
  UICircularProgressRingGradientPositionTop = 1,
/// Gradient positioned at the bottom
  UICircularProgressRingGradientPositionBottom = 2,
/// Gradient positioned to the left
  UICircularProgressRingGradientPositionLeft = 3,
/// Gradient positioned to the right
  UICircularProgressRingGradientPositionRight = 4,
/// Gradient positioned in the top left corner
  UICircularProgressRingGradientPositionTopLeft = 5,
/// Gradient positioned in the top right corner
  UICircularProgressRingGradientPositionTopRight = 6,
/// Gradient positioned in the bottom left corner
  UICircularProgressRingGradientPositionBottomLeft = 7,
/// Gradient positioned in the bottom right corner
  UICircularProgressRingGradientPositionBottomRight = 8,
};

@protocol CAAction;

/// The internal subclass for CAShapeLayer.
/// This is the class that handles all the drawing and animation.
/// This class is not interacted with, instead
/// properties are set in UICircularProgressRing and those are delegated to here.
SWIFT_CLASS("_TtC22UICircularProgressRing27UICircularProgressRingLayer")
@interface UICircularProgressRingLayer : CAShapeLayer
/// The NSManaged properties for the layer.
/// These properties are initialized in UICircularProgressRing.
/// They’re also assigned by mutating UICircularProgressRing properties.
@property (nonatomic) BOOL fullCircle;
@property (nonatomic) CGFloat value;
@property (nonatomic) CGFloat minValue;
@property (nonatomic) CGFloat maxValue;
@property (nonatomic) enum UICircularProgressRingStyle ringStyle;
@property (nonatomic) BOOL showsValueKnob;
@property (nonatomic) CGFloat valueKnobSize;
@property (nonatomic, strong) UIColor * _Nonnull valueKnobColor;
@property (nonatomic) CGFloat valueKnobShadowBlur;
@property (nonatomic) CGSize valueKnobShadowOffset;
@property (nonatomic, strong) UIColor * _Nonnull valueKnobShadowColor;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull patternForDashes;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientColorLocations;
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientStartPosition;
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientEndPosition;
@property (nonatomic) CGFloat startAngle;
@property (nonatomic) CGFloat endAngle;
@property (nonatomic) CGFloat outerRingWidth;
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
@property (nonatomic) CGLineCap outerCapStyle;
@property (nonatomic, strong) UIColor * _Nonnull outerBorderColor;
@property (nonatomic) CGFloat outerBorderWidth;
@property (nonatomic) CGFloat innerRingWidth;
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
@property (nonatomic) CGLineCap innerCapStyle;
@property (nonatomic) CGFloat innerRingSpacing;
@property (nonatomic) BOOL shouldShowValueText;
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, copy) NSString * _Nonnull valueIndicator;
@property (nonatomic) BOOL rightToLeft;
@property (nonatomic) BOOL showFloatingPoint;
@property (nonatomic) NSInteger decimalPlaces;
@property (nonatomic) BOOL isClockwise;
@property (nonatomic, weak) UICircularProgressRing * _Nullable valueDelegate;
/// Overriden for custom drawing.
/// Draws the outer ring, inner ring and value label.
- (void)drawInContext:(CGContextRef _Nonnull)ctx;
/// Watches for changes in the value property, and setNeedsDisplay accordingly
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Creates animation when value property is changed
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// <h1>UICircularProgressRingStyle</h1>
/// This is an enumeration which is used to determine the style of the progress ring.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingStyle, closed) {
/// Inner ring is inside the circle
  UICircularProgressRingStyleInside = 1,
/// Inner ring is placed ontop of the outer ring
  UICircularProgressRingStyleOntop = 2,
/// Outer ring is dashed
  UICircularProgressRingStyleDashed = 3,
/// Outer ring is dotted
  UICircularProgressRingStyleDotted = 4,
/// Inner ring is placed ontop of the outer ring and it has a gradient
  UICircularProgressRingStyleGradient = 5,
/// Inner ring is placed ontop of the outer ring and outer ring has border
  UICircularProgressRingStyleBordered = 6,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 effective-4.2 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UICircularProgressRing",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol UICircularProgressRingDelegate;
enum UICircularProgressRingStyle : NSInteger;
@class UIColor;
enum UICircularProgressRingGradientPosition : NSInteger;
@class UIFont;
@class NSCoder;

/// <h1>UICircularProgressRing</h1>
/// This is the UIView subclass that creates and handles everything
/// to do with the progress ring
/// This class has a custom CAShapeLayer (UICircularProgressRingLayer) which
/// handels the drawing and animating of the view
/// The properties in this class correspond with the
/// properties in UICircularProgressRingLayer.
/// When they are set in here, they are also set for the layer and drawn accordingly
/// Read the docs for what each property does and what can be customized.
/// <h2>Author</h2>
/// Luis Padron
SWIFT_CLASS("_TtC22UICircularProgressRing22UICircularProgressRing")
@interface UICircularProgressRing : UIView
/// The delegate for the UICircularProgressRing
/// <h2>Important</h2>
/// When progress is done updating via UICircularProgressRing.setValue(<em>:), the
/// finishedUpdatingProgressFor(</em> ring: UICircularProgressRing) will be called.
/// The ring will be passed to the delegate in order to keep track of
/// multiple ring updates if needed.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, weak) id <UICircularProgressRingDelegate> _Nullable delegate;
/// Whether or not the progress ring should be a full circle.
/// What this means is that the outer ring will always go from 0 - 360 degrees and
/// the inner ring will be calculated accordingly depending on current value.
/// <h2>Important</h2>
/// Default = true
/// When this property is true any value set for <code>endAngle</code> will be ignored.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL fullCircle;
/// The value property for the progress ring.
/// <h2>Important</h2>
/// Default = 0
/// Must be a non-negative value. If this value falls below <code>minValue</code> it will be
/// clamped and set equal to <code>minValue</code>.
/// This cannot be used to get the value while the ring is animating, to get
/// current value while animating use <code>currentValue</code>.
/// The current value of the progress ring after animating, use startProgress(value:)
/// to alter the value with the option to animate and have a completion handler.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat value;
/// The minimum value for the progress ring. ex: (0) -> 100.
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// The <code>value</code> of the progress ring must NOT fall below <code>minValue</code> if it does the <code>value</code> property is clamped
/// and will be set equal to <code>value</code>, you will receive a warning message in the console.
/// Making this value greater than
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat minValue;
/// The maximum value for the progress ring. ex: 0 -> (100)
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// Unlike the <code>minValue</code> member <code>value</code> can extend beyond <code>maxValue</code>. What happens in this case
/// is the inner ring will do an extra loop through the outer ring, this is not noticible however.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat maxValue;
/// Variable for the style of the progress ring.
/// Range: [1,5]
/// The four styles are
/// <ul>
///   <li>
///     1: Radius of the inner ring is smaller (inner ring inside outer ring)
///   </li>
///   <li>
///     2: Radius of inner ring is equal to outer ring (both at same location)
///   </li>
///   <li>
///     3: Radius of inner ring is equal to outer ring, and the outer ring is dashed
///   </li>
///   <li>
///     4: Radius of inner ring is equal to outer ring, and the outer ring is dotted
///   </li>
///   <li>
///     5: Radius of inner ring is equal to outer ring, and inner ring has gradient
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// The reason for this is IB has no support for enumerations as of yet
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger ibRingStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'ringStyle' instead");
/// The style of the progress ring.
/// Type: <code>UICircularProgressRingStyle</code>
/// The five styles include <code>inside</code>, <code>ontop</code>, <code>dashed</code>, <code>dotted</code>, and <code>gradient</code>
/// <h2>Important</h2>
/// Default = UICircularProgressRingStyle.inside
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingStyle ringStyle;
/// Whether or not the value knob is shown
/// <h2>Important</h2>
/// Default = false
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL showsValueKnob;
/// The size of the value knob (diameter)
/// <h2>Important</h2>
/// Default = 15
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat valueKnobSize;
/// The color of the value knob
/// <h2>Important</h2>
/// Default = UIColor.lightGray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull valueKnobColor;
/// The blur (size) of the value knob’s shadow
/// <h2>Important</h2>
/// Default = 2
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic) CGFloat valueKnobShadowBlur;
/// The offset of the value knob’s shadow
/// <h2>Important</h2>
/// Default = CGSize.zero
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic) CGSize valueKnobShadowOffset;
/// The color of the value knob’s shadow
/// <h2>Important</h2>
/// Default = UIColor.lightGray
/// <h2>Author</h2>
/// Makan Houston
@property (nonatomic, strong) UIColor * _Nonnull valueKnobShadowColor;
/// An array of CGFloats, used to calculate the dash length for viewStyle = 3
/// <h2>Important</h2>
/// Default = [7.0, 7.0]
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull patternForDashes;
/// The start angle for the entire progress ring view.
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 0 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat startAngle;
/// The end angle for the entire progress ring
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 360 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat endAngle;
/// The colors which will be used to create the gradient.
/// Only used when <code>ringStyle</code> is <code>.gradient</code>
/// The colors should be in the order they will be drawn in.
/// <h2>Important</h2>
/// By default this property will be an empty array.
/// If this array is empty, no gradient will be drawn.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
/// The location for each color provided in <code>gradientColors</code>; each location must be
/// a CGFloat value in the range of 0 to 1, inclusive. If 0 and 1 are not in the
/// locations array, Quartz uses the colors provided that are closest to 0 and 1 for
/// those locations.
/// If locations is nil, the first color in <code>gradientColors</code> is assigned to location 0,
/// the last color in <code>gradientColors</code> is assigned to location 1, and intervening
/// colors are assigned locations that are at equal intervals in between.
/// The locations array should contain the same number of items as the <code>gradientColors</code>
/// array.
/// <h2>Important</h2>
/// By default this property will be nil
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientColorLocations;
/// The start location for the gradient.
/// This property determines where the gradient will begin to draw,
/// for all possible values see <code>UICircularProgressRingGradientPosition</code>.
/// <h2>Important</h2>
/// By default this property is <code>.topRight</code>
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientStartPosition;
/// The end location for the gradient.
/// This property determines where the gradient will end drawing,
/// for all possible values see <code>UICircularProgressRingGradientPosition</code>.
/// <h2>Important</h2>
/// By default this property is <code>.bottomLeft</code>
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientEndPosition;
/// The width of the outer ring for the progres bar
/// <h2>Important</h2>
/// Default = 10.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat outerRingWidth;
/// The color for the outer ring
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
/// The color for the outer ring border
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Abdulla Allaith
@property (nonatomic, strong) UIColor * _Nonnull outerBorderColor;
/// The width for the outer ring border
/// <h2>Important</h2>
/// Default = 2
/// <h2>Author</h2>
/// Abdulla Allaith
@property (nonatomic) CGFloat outerBorderWidth;
/// The style for the outer ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 1
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t outerRingCapStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'outerCapStyle' instead");
/// The style for the tip/cap of the outer ring
/// Type: <code>CGLineCap</code>
/// <h2>Important</h2>
/// Default = CGLineCap.butt
/// This is only noticible when ring is not a full circle.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGLineCap outerCapStyle;
/// The width of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = 5.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingWidth;
/// The color of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = UIColor.blue
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
/// The spacing between the outer ring and inner ring
/// <h2>Important</h2>
/// This only applies when using progressRingStyle = 1
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingSpacing;
/// The style for the inner ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 2
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 2
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t innerRingCapStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder, use 'innerCapStyle' instead");
/// The style for the tip/cap of the inner ring
/// Type: <code>CGLineCap</code>
/// <h2>Important</h2>
/// Default = CGLineCap.round
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGLineCap innerCapStyle;
/// A toggle for showing or hiding the value label.
/// If false the current value will not be shown.
/// <h2>Important</h2>
/// Default = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL shouldShowValueText;
/// The text color for the value label field
/// <h2>Important</h2>
/// Default = UIColor.black
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
/// The font to be used for the progress indicator.
/// All font attributes are specified here except for font color, which is done
/// using <code>fontColor</code>.
/// <h2>Important</h2>
/// Default = UIFont.systemFont(ofSize: 18)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The name of the value indicator the value label will
/// appened to the value
/// Example: “ GB” -> “100 GB”
/// <h2>Important</h2>
/// Default = “%”
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSString * _Nonnull valueIndicator;
/// A toggle for either placing the value indicator right or left to the value
/// Example: true -> “GB 100” (instead of 100 GB)
/// <h2>Important</h2>
/// Default = false (place value indicator to the right)
/// <h2>Author</h2>
/// Elad Hayun
@property (nonatomic) BOOL rightToLeft;
/// A toggle for showing or hiding floating points from
/// the value in the value label
/// <h2>Important</h2>
/// Default = false (dont show)
/// To customize number of decmial places to show, assign a value to decimalPlaces.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL showFloatingPoint;
/// The amount of decimal places to show in the value label
/// <h2>Important</h2>
/// Default = 2
/// Only used when showFloatingPoint = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger decimalPlaces;
/// The type of animation function the ring view will use
/// <h2>Important</h2>
/// Default = .easeInEaseOut
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CAMediaTimingFunctionName _Nonnull animationTimingFunction;
/// This returns whether or not the ring is currently animating
/// <h2>Important</h2>
/// Get only property
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, readonly) BOOL isAnimating;
/// The direction the circle is drawn in
/// Example: true -> clockwise
/// <h2>Important</h2>
/// Default = true (draw the circle clockwise)
/// <h2>Author</h2>
/// Pete Walker
@property (nonatomic) BOOL isClockwise;
/// Overrides the default layer with the custom UICircularProgressRingLayer class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Overriden public init to initialize the layer and view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overriden public init to initialize the layer and view
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriden because of custom layer drawing in UICircularProgressRingLayer
- (void)drawRect:(CGRect)rect;
/// Sets the current value for the progress ring, calling this method while ring is
/// animating will cancel the previously set animation and start a new one.
/// <h2>Important</h2>
/// Animation duration = 0 will cause no animation to occur, and value will instantly
/// be set.
/// Calling this method again while a current progress animation is in progress will <em>not</em>
/// cause the animation to be restarted. The old animation will be removed (calling the completion and delegate)
/// and a new animation will start from where the old one left off at. If you wish to instead reset an animation
/// consider <code>resetProgress</code>.
/// <h2>Author</h2>
/// Luis Padron
/// \param to The value to be set for the progress ring
///
/// \param duration The time interval duration for the animation
///
/// \param completion The completion closure block that will be called when
/// animtion is finished (also called when animationDuration = 0), default is nil
///
- (void)startProgressTo:(CGFloat)value duration:(NSTimeInterval)duration completion:(void (^ _Nullable)(void))completion;
/// Pauses the currently running animation and halts all progress.
/// <h2>Important</h2>
/// This method has no effect unless called when there is a running animation.
/// You should call this method manually whenever the progress ring is not in an active view,
/// for example in <code>viewWillDisappear</code> in a parent view controller.
/// <h2>Author</h2>
/// Luis Padron & Nicolai Cornelis
- (void)pauseProgress;
/// Continues the animation with its remaining time from where it left off before it was paused.
/// This method has no effect unless called when there is a paused animation.
/// You should call this method when you wish to resume a paused animation.
/// <h2>Author</h2>
/// Luis Padron & Nicolai Cornelis
- (void)continueProgress;
/// Resets the progress back to the <code>minValue</code> of the progress ring.
/// Does <em>not</em> perform any animations
/// <h2>Author</h2>
/// Luis Padron
- (void)resetProgress;
/// This function allows animation of the animatable properties of the <code>UICircularProgressRing</code>.
/// These properties include <code>innerRingColor, innerRingWidth, outerRingColor, outerRingWidth, innerRingSpacing, fontColor</code>.
/// Simply call this function and inside of the animation block change the animatable properties as you would in any <code>UView</code>
/// animation block.
/// The completion block is called when all animations finish.
- (void)animatePropertiesWithDuration:(NSTimeInterval)duration animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations;
/// This function allows animation of the animatable properties of the <code>UICircularProgressRing</code>.
/// These properties include <code>innerRingColor, innerRingWidth, outerRingColor, outerRingWidth, innerRingSpacing, fontColor</code>.
/// Simply call this function and inside of the animation block change the animatable properties as you would in any <code>UView</code>
/// animation block.
/// The completion block is called when all animations finish.
- (void)animatePropertiesWithDuration:(NSTimeInterval)duration animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(void))completion;
@end



@class UILabel;

/// This is the protocol declaration for the UICircularProgressRing delegate property
/// <h2>Important</h2>
/// When progress is done updating via UICircularProgressRing.setValue(_:), the
/// finishedUpdatingProgress(forRing: UICircularProgressRing) will be called.
/// The ring will be passed to the delegate in order to keep
/// track of multiple ring updates if needed.
/// <h2>Author</h2>
/// Luis Padron
SWIFT_PROTOCOL("_TtP22UICircularProgressRing30UICircularProgressRingDelegate_")
@protocol UICircularProgressRingDelegate
@optional
/// Called when progress ring is done animating for current value
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which finished animating
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didFinishProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// Called when progress has paused
/// <ul>
///   <li>
///     Parameter:
///     <ul>
///       <li>
///         ring: The ring which has paused
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didPauseProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// Called when the progress has continued after a pause
/// <ul>
///   <li>
///     Parameter:
///     <ul>
///       <li>
///         ring: The ring which has continued
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didContinueProgressFor:(UICircularProgressRing * _Nonnull)ring;
/// This method is called whenever the value is updated, this means during animation this method will be called in real time.
/// This can be used to update another label or do some other work, whenever you need the exact current value of the ring
/// during animation.
/// <h2>Important:</h2>
/// This is a very hot method and may be called hundreds of times per second during animations. As such make sure to only
/// do very simple and non-intensive work in this method. Doing any work that takes time will considerably slow down your application.
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which updated the progress
///       </li>
///       <li>
///         newValue: The value which the ring has updated to
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didUpdateProgressValueFor:(UICircularProgressRing * _Nonnull)ring to:(CGFloat)newValue;
/// This method is called whenever the label is about to be drawn.
/// This can be used to modify the label looks e.g. NSAttributedString for text kerning
/// <ul>
///   <li>
///     Paramater
///     <ul>
///       <li>
///         ring: The ring which the label will be displayed in
///       </li>
///       <li>
///         label: The label which will be displayed
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)willDisplayLabelFor:(UICircularProgressRing * _Nonnull)ring :(UILabel * _Nonnull)label;
@end

/// <h1>UICircularProgressRingGradientPosition</h1>
/// This is an enumeration which is used to determine the position for a
/// gradient. Used inside the <code>UICircularProgressRingLayer</code> to allow customization
/// for the gradient.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingGradientPosition, closed) {
/// Gradient positioned at the top
  UICircularProgressRingGradientPositionTop = 1,
/// Gradient positioned at the bottom
  UICircularProgressRingGradientPositionBottom = 2,
/// Gradient positioned to the left
  UICircularProgressRingGradientPositionLeft = 3,
/// Gradient positioned to the right
  UICircularProgressRingGradientPositionRight = 4,
/// Gradient positioned in the top left corner
  UICircularProgressRingGradientPositionTopLeft = 5,
/// Gradient positioned in the top right corner
  UICircularProgressRingGradientPositionTopRight = 6,
/// Gradient positioned in the bottom left corner
  UICircularProgressRingGradientPositionBottomLeft = 7,
/// Gradient positioned in the bottom right corner
  UICircularProgressRingGradientPositionBottomRight = 8,
};

@protocol CAAction;

/// The internal subclass for CAShapeLayer.
/// This is the class that handles all the drawing and animation.
/// This class is not interacted with, instead
/// properties are set in UICircularProgressRing and those are delegated to here.
SWIFT_CLASS("_TtC22UICircularProgressRing27UICircularProgressRingLayer")
@interface UICircularProgressRingLayer : CAShapeLayer
/// The NSManaged properties for the layer.
/// These properties are initialized in UICircularProgressRing.
/// They’re also assigned by mutating UICircularProgressRing properties.
@property (nonatomic) BOOL fullCircle;
@property (nonatomic) CGFloat value;
@property (nonatomic) CGFloat minValue;
@property (nonatomic) CGFloat maxValue;
@property (nonatomic) enum UICircularProgressRingStyle ringStyle;
@property (nonatomic) BOOL showsValueKnob;
@property (nonatomic) CGFloat valueKnobSize;
@property (nonatomic, strong) UIColor * _Nonnull valueKnobColor;
@property (nonatomic) CGFloat valueKnobShadowBlur;
@property (nonatomic) CGSize valueKnobShadowOffset;
@property (nonatomic, strong) UIColor * _Nonnull valueKnobShadowColor;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull patternForDashes;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull gradientColors;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable gradientColorLocations;
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientStartPosition;
@property (nonatomic) enum UICircularProgressRingGradientPosition gradientEndPosition;
@property (nonatomic) CGFloat startAngle;
@property (nonatomic) CGFloat endAngle;
@property (nonatomic) CGFloat outerRingWidth;
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
@property (nonatomic) CGLineCap outerCapStyle;
@property (nonatomic, strong) UIColor * _Nonnull outerBorderColor;
@property (nonatomic) CGFloat outerBorderWidth;
@property (nonatomic) CGFloat innerRingWidth;
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
@property (nonatomic) CGLineCap innerCapStyle;
@property (nonatomic) CGFloat innerRingSpacing;
@property (nonatomic) BOOL shouldShowValueText;
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, copy) NSString * _Nonnull valueIndicator;
@property (nonatomic) BOOL rightToLeft;
@property (nonatomic) BOOL showFloatingPoint;
@property (nonatomic) NSInteger decimalPlaces;
@property (nonatomic) BOOL isClockwise;
@property (nonatomic, weak) UICircularProgressRing * _Nullable valueDelegate;
/// Overriden for custom drawing.
/// Draws the outer ring, inner ring and value label.
- (void)drawInContext:(CGContextRef _Nonnull)ctx;
/// Watches for changes in the value property, and setNeedsDisplay accordingly
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Creates animation when value property is changed
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// <h1>UICircularProgressRingStyle</h1>
/// This is an enumeration which is used to determine the style of the progress ring.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingStyle, closed) {
/// Inner ring is inside the circle
  UICircularProgressRingStyleInside = 1,
/// Inner ring is placed ontop of the outer ring
  UICircularProgressRingStyleOntop = 2,
/// Outer ring is dashed
  UICircularProgressRingStyleDashed = 3,
/// Outer ring is dotted
  UICircularProgressRingStyleDotted = 4,
/// Inner ring is placed ontop of the outer ring and it has a gradient
  UICircularProgressRingStyleGradient = 5,
/// Inner ring is placed ontop of the outer ring and outer ring has border
  UICircularProgressRingStyleBordered = 6,
};



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
